From fa3ce34b932e40f52b614409349be0bdef6fc197 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Wed, 22 Feb 2017 11:03:04 +0100
Subject: [PATCH 1/2] Make cURL relocatable

This adds the ability to specify CA_BUNDLE paths that are relative to
the MSYS2 pseudo-root directory.

To make it truly relocatable, we use the path to the *cURL library*
instead of the path to the current .exe to determine the location of the
pseudo-root directory (allowing the .exe file to live completely outside
of the MSYS2 system, e.g. in $HOME/bin). This requires Win32 API
available in Windows XP & 2003 and later, well within the Windows
versions supported by Cygwin (and therefore MSYS2).

We also need to be extra careful to extend that path logic to the
ca-bundle.crt used to validate HTTPS *proxies*, not only HTTPS servers.

Note: This patch relies on the `pathtools.c` and `pathtools.h` files to
be copied from `mingw-w64-pathtools` into `lib/`.

Original-patch-by: Ray Donnelly <mingw.android@gmail.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 configure.ac         |  1 +
 lib/Makefile.inc     |  2 ++
 lib/curl_config.h.in |  3 +++
 lib/url.c            | 37 +++++++++++++++++++++++++++++++++++++
 4 files changed, 43 insertions(+)

diff --git a/configure.ac b/configure.ac
index a889919fe..626684867 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3457,6 +3457,7 @@ dnl default includes
 ]
 )
 
+AC_DEFINE_UNQUOTED(CURL_BINDIR, "${prefix}/bin", [bindir])
 
 dnl Checks for typedefs, structures, and compiler characteristics.
 AC_C_CONST
diff --git a/lib/Makefile.inc b/lib/Makefile.inc
index 663190a19..b7d597e80 100644
--- a/lib/Makefile.inc
+++ b/lib/Makefile.inc
@@ -186,6 +186,7 @@ LIB_CFILES =         \
   noproxy.c          \
   openldap.c         \
   parsedate.c        \
+  pathtools.c        \
   pingpong.c         \
   pop3.c             \
   progress.c         \
@@ -314,6 +315,7 @@ LIB_HFILES =         \
   nonblock.h         \
   noproxy.h          \
   parsedate.h        \
+  pathtools.h        \
   pingpong.h         \
   pop3.h             \
   progress.h         \
diff --git a/lib/curl_config.h.in b/lib/curl_config.h.in
index 6d274171b..58647b5e7 100644
--- a/lib/curl_config.h.in
+++ b/lib/curl_config.h.in
@@ -12,6 +12,9 @@
 /* Location of default ca path */
 #undef CURL_CA_PATH
 
+/* Location of executable */
+#undef CURL_BINDIR
+
 /* Default SSL backend */
 #undef CURL_DEFAULT_SSL_BACKEND
 
diff --git a/lib/url.c b/lib/url.c
index f7b4bbbe9..7e9cf8ae6 100644
--- a/lib/url.c
+++ b/lib/url.c
@@ -119,6 +119,9 @@
 #include "altsvc.h"
 #include "dynbuf.h"
 #include "headers.h"
+#if defined(__MINGW32__)
+#include "pathtools.h"
+#endif
 
 /* The last 3 #include files should be in this order */
 #include "curl_printf.h"
@@ -570,21 +573,55 @@ CURLcode Curl_init_userdefined(struct Curl_easy *data)
    */
   if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL) {
 #if defined(CURL_CA_BUNDLE)
+#if defined(__MINGW32__)
+    const size_t path_max = PATH_MAX;
+    char relocated_bundle[path_max];
+    get_dll_path(relocated_bundle, path_max);
+    strip_n_suffix_folders(relocated_bundle, 1);
+    strncat(relocated_bundle, "/", path_max - 1);
+    char *relative = get_relative_path(CURL_BINDIR, CURL_CA_BUNDLE);
+    strncat(relocated_bundle, relative, path_max - 1);
+    free((void*)relative);
+    simplify_path(relocated_bundle);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], relocated_bundle);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
+#endif /* defined(__MINGW32__) */
     if(result)
       return result;
 
+#if defined(__MINGW32__)
+    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY], relocated_bundle);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
                             CURL_CA_BUNDLE);
+#endif
     if(result)
       return result;
 #endif
 #if defined(CURL_CA_PATH)
+#if defined(__MINGW32__)
+    const size_t path_max = PATH_MAX;
+    char relocated_ca_path[path_max];
+    get_dll_path(relocated_ca_path, path_max);
+    strip_n_suffix_folders(relocated_ca_path, 1);
+    strncat(relocated_ca_path, "/", path_max - 1);
+    char *relative = get_relative_path(CURL_BINDIR, CURL_CA_PATH);
+    strncat(relocated_ca_path, relative, path_max - 1);
+    free((void*)relative);
+    simplify_path(relocated_ca_path);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], relocated_ca_path);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], CURL_CA_PATH);
+#endif /* defined(__MINGW32__) */
     if(result)
       return result;
 
+#if defined(__MINGW32__)
+    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], relocated_ca_path);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], CURL_CA_PATH);
+#endif
     if(result)
       return result;
 #endif
